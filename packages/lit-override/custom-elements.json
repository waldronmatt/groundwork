{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./context/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./controllers/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./mixins/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "coverage/lcov-report/block-navigation.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "coverage/lcov-report/prettify.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "coverage/lcov-report/sorter.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lit-override.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/lit-override.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "LitOverride - `<lit-override>`\n\nA shell component for overriding styles and markup.",
          "name": "LitOverride",
          "slots": [
            {
              "description": "is rendered as fallback if `<template>` element is not found.",
              "name": "`<slot></slot>`"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "templateId",
              "type": {
                "text": "string"
              },
              "description": "Set an id referencing a `template` element. Defaults to a generic `template` element."
            },
            {
              "kind": "field",
              "name": "emitConnectedCallback",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "emitConnectedCallback",
              "reflects": true,
              "description": "Set prop to use `connected-callback` event. Defaults to `false`.",
              "inheritedFrom": {
                "name": "EmitConnectedCallback",
                "module": "src/mixins/emit-connected-callback.ts"
              }
            },
            {
              "kind": "field",
              "name": "onConnectedCallback",
              "type": {
                "text": "function"
              },
              "description": "A callback function called when connected to the DOM.",
              "inheritedFrom": {
                "name": "EmitConnectedCallback",
                "module": "src/mixins/emit-connected-callback.ts"
              }
            },
            {
              "kind": "method",
              "name": "setEmitConnectedCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "childInfo",
                  "type": {
                    "text": "EmitConnectedCallbackInfo"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EmitConnectedCallback",
                "module": "src/mixins/emit-connected-callback.ts"
              }
            }
          ],
          "events": [
            {
              "description": "when `emitConnectedCallback` is `true`.",
              "name": "connected-callback"
            }
          ],
          "mixins": [
            {
              "name": "EmitConnectedCallback",
              "module": "/src/mixins/emit-connected-callback.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "lit-override",
          "customElement": true,
          "attributes": [
            {
              "name": "emitConnectedCallback",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "emitConnectedCallback",
              "inheritedFrom": {
                "name": "EmitConnectedCallback",
                "module": "src/mixins/emit-connected-callback.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LitOverride",
          "declaration": {
            "name": "LitOverride",
            "module": "src/components/lit-override.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/lit-override.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lit-override.component.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LitOverride",
            "module": "src/components/lit-override.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lit-override",
          "declaration": {
            "name": "LitOverride",
            "module": "/src/components/lit-override.component.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context/consumer.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "LitOverrideConsumer - `<lit-override-consumer>`\n\nContext consumer of custom styles and markup. Renders `nothing` by default.\n\nExample:\n\n```js\nconst customStyles = css`\n ::slotted([slot='heading']) {\n   text-decoration: underline;\n }\n`;\n\nconst customMarkup = () => {\n return html`<slot name=\"heading\"></slot>`;\n};\n\nrender() {\n return html`\n   <lit-override-provider\n     .override=${{ styles: customStyles, markup: customMarkup }}\n   >\n     <lit-override-consumer>\n       <h3 slot=\"heading\">Hello World!</h3>\n     </lit-override-consumer>\n   </lit-override-provider>\n `\n}\n```",
          "name": "LitOverrideConsumer",
          "members": [
            {
              "kind": "field",
              "name": "override",
              "type": {
                "text": "Partial<LitOverrideContextProps> | undefined"
              }
            },
            {
              "kind": "method",
              "name": "setAdoptedStyleSheets",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "lit-override-consumer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LitOverrideConsumer",
          "declaration": {
            "name": "LitOverrideConsumer",
            "module": "src/context/consumer.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context/consumer.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./consumer.component.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LitOverrideConsumer",
            "module": "src/context/consumer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lit-override-consumer",
          "declaration": {
            "name": "LitOverrideConsumer",
            "module": "/src/context/consumer.component.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./provider.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./consumer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context/key.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "litOverrideContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "litOverrideContext",
          "declaration": {
            "name": "litOverrideContext",
            "module": "src/context/key.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context/provider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "LitOverrideProvider - `<lit-override-provider>`\n\nContext provider of custom styles and markup.\n\n**Note**: Set `clearStyles` to `true` to replace existing styles.\n\nExample:\n\n```js\nconst customStyles = css`\n ::slotted([slot='heading']) {\n   text-decoration: underline;\n }\n`;\n\nconst customMarkup = () => {\n return html`<slot name=\"heading\"></slot>`;\n};\n\nrender() {\n return html`\n   <lit-override-provider\n     .override=${{ styles: customStyles, markup: customMarkup }}\n   >\n     <lit-override-consumer>\n       <h3 slot=\"heading\">Hello World!</h3>\n     </lit-override-consumer>\n   </lit-override-provider>\n `\n}\n```",
          "name": "LitOverrideProvider",
          "members": [
            {
              "kind": "field",
              "name": "override",
              "type": {
                "text": "Partial<LitOverrideContextProps>"
              },
              "default": "{}"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "lit-override-provider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LitOverrideProvider",
          "declaration": {
            "name": "LitOverrideProvider",
            "module": "src/context/provider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context/provider.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./provider.component.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LitOverrideProvider",
            "module": "src/context/provider.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "lit-override-provider",
          "declaration": {
            "name": "LitOverrideProvider",
            "module": "/src/context/provider.component.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/adopted-stylesheets-converter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "AdoptedStyleSheetsConverter\n\nDetects a `style` tag inside a `template` element from the light DOM, converts the styles,\nand adds it to the component's `adoptedStyleSheets`.",
          "name": "AdoptedStyleSheetsConverter",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "default": "host"
            },
            {
              "kind": "field",
              "name": "clearStyles",
              "type": {
                "text": "AdoptedStyleSheetsConverterParams['clearStyles']"
              },
              "default": "clearStyles"
            },
            {
              "kind": "field",
              "name": "templateEl",
              "type": {
                "text": "AdoptedStyleSheetsConverterParams['templateEl']"
              },
              "default": "templateEl"
            },
            {
              "kind": "field",
              "name": "_shadowRoot",
              "type": {
                "text": "ShadowRoot"
              },
              "privacy": "private",
              "default": "(this.host as LitElement).renderRoot"
            },
            {
              "kind": "method",
              "name": "updateStylesheet",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setAdoptedStyleSheets",
              "privacy": "private",
              "parameters": [
                {
                  "name": "styleElement",
                  "type": {
                    "text": "HTMLStyleElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeComponentStyleTag",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AdoptedStyleSheetsConverter",
          "declaration": {
            "name": "AdoptedStyleSheetsConverter",
            "module": "src/controllers/adopted-stylesheets-converter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./adopted-stylesheets-converter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/decorators/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./query-template-by-id.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/decorators/query-template-by-id.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryTemplateById",
          "parameters": [
            {
              "name": "{ cache = true, fallback = false }",
              "default": "{}",
              "type": {
                "text": "QueryTemplateByIdParams"
              }
            },
            {
              "description": "caches the template element between component renders when enabled. Defaults to `true`.",
              "name": "cache"
            },
            {
              "description": "gets a template element if an id is not provided (not cached). Defaults to `false`.",
              "name": "fallback"
            }
          ],
          "description": "queryTemplateById\n\nGets a template element by id that is provided to the `templateId` property.\nWill cache the template element on successful query."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryTemplateById",
          "declaration": {
            "name": "queryTemplateById",
            "module": "src/decorators/query-template-by-id.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./template-content-with-fallback.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/template-content-with-fallback.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TemplateContentWithFallbackDirective",
          "members": [],
          "superclass": {
            "name": "Directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "templateContentWithFallback",
          "description": "TemplateContentWithFallbackDirective\n\nDetects a `template` element from the light DOM and renders it.\nWill fallback to your component's markup provided as an argument.",
          "parameters": [
            {
              "description": "renders markup if a `template` element is not found. Defaults to `<slot></slot>`.",
              "name": "fallback"
            },
            {
              "description": "a `template` element. Defaults to null.",
              "name": "templateEl"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "templateContentWithFallback",
          "declaration": {
            "name": "templateContentWithFallback",
            "module": "src/directives/template-content-with-fallback.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateContentWithFallbackDirective",
          "declaration": {
            "name": "TemplateContentWithFallbackDirective",
            "module": "src/directives/template-content-with-fallback.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/emit-connected-callback.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EmitConnectedCallbackProps",
          "members": [
            {
              "kind": "field",
              "name": "emitConnectedCallback",
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "LitOverrideMixin\n\nEnables your component to emit `connected-callback` if `emitConnectedCallback` prop is set.\nAlternatively, use `onConnectedCallback` if performance is a concern.",
          "name": "EmitConnectedCallback",
          "members": [
            {
              "kind": "field",
              "name": "emitConnectedCallback",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "emitConnectedCallback",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "onConnectedCallback"
            },
            {
              "kind": "method",
              "name": "setEmitConnectedCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "childInfo",
                  "type": {
                    "text": "EmitConnectedCallbackInfo"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "emitConnectedCallback",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "emitConnectedCallback"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EmitConnectedCallbackProps",
          "declaration": {
            "name": "EmitConnectedCallbackProps",
            "module": "src/mixins/emit-connected-callback.ts"
          }
        },
        {
          "kind": "js",
          "name": "EmitConnectedCallback",
          "declaration": {
            "name": "EmitConnectedCallback",
            "module": "src/mixins/emit-connected-callback.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./emit-connected-callback.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./styles.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./markup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/markup.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "injectTemplate",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "elements",
              "type": {
                "text": "NodeListOf<Element> | Array<Element>"
              },
              "description": "iterable of elements to apply markup to"
            },
            {
              "name": "template",
              "type": {
                "text": "() => TemplateResult"
              },
              "description": "TemplateResult"
            }
          ],
          "description": "Applies the given template to the `shadowRoot` of elements."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "injectTemplate",
          "declaration": {
            "name": "injectTemplate",
            "module": "src/utils/markup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/styles.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "injectStyles",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "elements",
              "type": {
                "text": "NodeListOf<Element> | Array<Element>"
              },
              "description": "iterable of elements to apply styles to"
            },
            {
              "name": "style",
              "type": {
                "text": "CSSResult"
              },
              "description": "CSSResult"
            },
            {
              "name": "clearStyles",
              "default": "false",
              "type": {
                "text": "boolean"
              },
              "description": "replace or preserve original styles. Defaults to `false`."
            }
          ],
          "description": "Applies the given style using `adoptedStyleSheets`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "injectStyles",
          "declaration": {
            "name": "injectStyles",
            "module": "src/utils/styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context/__fixtures__/context-data.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "customStyles",
          "default": "css` ::slotted([slot='heading']) { text-decoration: underline; } `"
        },
        {
          "kind": "function",
          "name": "customMarkup"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "customStyles",
          "declaration": {
            "name": "customStyles",
            "module": "src/context/__fixtures__/context-data.ts"
          }
        },
        {
          "kind": "js",
          "name": "customMarkup",
          "declaration": {
            "name": "customMarkup",
            "module": "src/context/__fixtures__/context-data.ts"
          }
        }
      ]
    }
  ]
}
